{"ast":null,"code":"import React,{createContext,useEffect,useState}from\"react\";// Context creation for Posts\nimport{jsx as _jsx}from\"react/jsx-runtime\";export const PostsContext=/*#__PURE__*/createContext(null);export function PostsProvider(_ref){let{children}=_ref;let[posts,setPosts]=useState([]);// Gets random details to the posts in addition to when given in the fetch\nfunction getRandomCategoryForPost(){const categories=['Daily_Digest','Design_Tools','Tutorials'];const randomIndex=Math.floor(Math.random()*categories.length);return categories[randomIndex];}function getRandomDate(){const startDate=new Date('2023-01-01');const currentDate=new Date();const randomMilliseconds=Math.floor(Math.random()*(currentDate-startDate+1));const randomDate=new Date(startDate.getTime()+randomMilliseconds);return randomDate;}const fetchPosts=()=>{// Using local storage for the posts from the fetch\nconst storedPosts=JSON.parse(localStorage.getItem(\"posts\"))||[];// If the local storage is empty, then do fetch to the details for the posts\nif(storedPosts.length>0){setPosts(storedPosts);}else{fetch('https://jsonplaceholder.typicode.com/posts').then(response=>{if(!response.ok){throw new Error('Network response was not ok');}return response.json();}).then(json=>{const postsWithCategories=json.map(post=>{const randomDate=getRandomDate();const formatter=new Intl.DateTimeFormat('en',{month:'long',day:'numeric',year:'numeric'});const formattedDate=formatter.format(randomDate);return{id:post.id,title:post.title,description:post.body,date:formattedDate,category:getRandomCategoryForPost(),imageUrl:\"https://picsum.photos/id/\".concat(post.id,\"/250/300\")};});setPosts(postsWithCategories);// Save fetched posts to local storage\nlocalStorage.setItem(\"posts\",JSON.stringify(postsWithCategories));}).catch(error=>{console.error('Error fetching posts:',error);});}};useEffect(()=>{fetchPosts();},[]);useEffect(()=>{// Save posts to local storage whenever posts are updated\nlocalStorage.setItem(\"posts\",JSON.stringify(posts));},[posts]);const addPost=post=>{setPosts(prevPosts=>{const updatedPosts=[...prevPosts,post];localStorage.setItem(\"posts\",JSON.stringify(updatedPosts));return updatedPosts;});};const removePost=post=>{setPosts(prevPosts=>{const updatedPosts=prevPosts.filter(item=>item.id!==post.id);localStorage.setItem(\"posts\",JSON.stringify(updatedPosts));return updatedPosts;});};const clearPost=()=>{setPosts([]);};const updatePost=updatedPost=>{removePost(updatedPost);addPost(updatedPost);};const filterPostsByCategory=category=>{return posts.filter(post=>post.category===category);};const getAmountOfFilterPostsByCategory=category=>{return posts.filter(post=>post.category===category).length;};const setNewPostId=()=>parseInt(posts.length+1,10);const getLastThreePostsByCategory=category=>{const sortedPosts=posts.filter(post=>post.category===category).sort((a,b)=>new Date(b.date)-new Date(a.date));return sortedPosts.slice(0,3);};const getPostById=currentPostId=>{return posts.find(post=>post.id===currentPostId);};const getPostByTitle=title=>{return posts.filter(post=>post.title.includes(title));};const value={posts,fetchPosts,addPost,removePost,clearPost,filterPostsByCategory,getLastThreePostsByCategory,getAmountOfFilterPostsByCategory,setNewPostId,getPostById,getPostByTitle,updatePost};return/*#__PURE__*/_jsx(PostsContext.Provider,{value:value,children:children});}export default PostsProvider;","map":{"version":3,"names":["React","createContext","useEffect","useState","jsx","_jsx","PostsContext","PostsProvider","_ref","children","posts","setPosts","getRandomCategoryForPost","categories","randomIndex","Math","floor","random","length","getRandomDate","startDate","Date","currentDate","randomMilliseconds","randomDate","getTime","fetchPosts","storedPosts","JSON","parse","localStorage","getItem","fetch","then","response","ok","Error","json","postsWithCategories","map","post","formatter","Intl","DateTimeFormat","month","day","year","formattedDate","format","id","title","description","body","date","category","imageUrl","concat","setItem","stringify","catch","error","console","addPost","prevPosts","updatedPosts","removePost","filter","item","clearPost","updatePost","updatedPost","filterPostsByCategory","getAmountOfFilterPostsByCategory","setNewPostId","parseInt","getLastThreePostsByCategory","sortedPosts","sort","a","b","slice","getPostById","currentPostId","find","getPostByTitle","includes","value","Provider"],"sources":["C:/Users/Tal/Documents/Programming courses/WebDev/BackEnd/Blog_Final_Project/BlogFrontEnd/src/providers/posts-providers.js"],"sourcesContent":["import React, { createContext, useEffect, useState } from \"react\";\r\n\r\n// Context creation for Posts\r\nexport const PostsContext = createContext(null);\r\n\r\nexport function PostsProvider({ children }) {\r\n    let [posts, setPosts] = useState([]);\r\n\r\n    // Gets random details to the posts in addition to when given in the fetch\r\n    function getRandomCategoryForPost() {\r\n        const categories = ['Daily_Digest', 'Design_Tools', 'Tutorials'];\r\n        const randomIndex = Math.floor(Math.random() * categories.length);\r\n        return categories[randomIndex];\r\n    }\r\n\r\n    function getRandomDate() {\r\n        const startDate = new Date('2023-01-01');\r\n        const currentDate = new Date();\r\n        const randomMilliseconds = Math.floor(Math.random() * (currentDate - startDate + 1));\r\n        const randomDate = new Date(startDate.getTime() + randomMilliseconds);\r\n        return randomDate;\r\n    }\r\n\r\n    const fetchPosts = () => {\r\n        // Using local storage for the posts from the fetch\r\n        const storedPosts = JSON.parse(localStorage.getItem(\"posts\")) || [];\r\n\r\n        // If the local storage is empty, then do fetch to the details for the posts\r\n        if (storedPosts.length > 0) {\r\n            setPosts(storedPosts);\r\n        } else {\r\n            fetch('https://jsonplaceholder.typicode.com/posts')\r\n                .then(response => {\r\n                    if (!response.ok) {\r\n                        throw new Error('Network response was not ok');\r\n                    }\r\n                    return response.json();\r\n                })\r\n                .then(json => {\r\n                    const postsWithCategories = json.map(post => {\r\n                        const randomDate = getRandomDate();\r\n                        const formatter = new Intl.DateTimeFormat('en', {\r\n                            month: 'long',\r\n                            day: 'numeric',\r\n                            year: 'numeric',\r\n                        });\r\n                        const formattedDate = formatter.format(randomDate);\r\n\r\n                        return {\r\n                            id: post.id,\r\n                            title: post.title,\r\n                            description: post.body,\r\n                            date: formattedDate,\r\n                            category: getRandomCategoryForPost(),\r\n                            imageUrl: `https://picsum.photos/id/${post.id}/250/300`,\r\n                        };\r\n                    });\r\n\r\n                    setPosts(postsWithCategories);\r\n\r\n                    // Save fetched posts to local storage\r\n                    localStorage.setItem(\"posts\", JSON.stringify(postsWithCategories));\r\n                })\r\n                .catch(error => {\r\n                    console.error('Error fetching posts:', error);\r\n                });\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchPosts();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        // Save posts to local storage whenever posts are updated\r\n        localStorage.setItem(\"posts\", JSON.stringify(posts));\r\n    }, [posts]);\r\n\r\n    const addPost = (post) => {\r\n        setPosts(prevPosts => {\r\n            const updatedPosts = [...prevPosts, post];\r\n            localStorage.setItem(\"posts\", JSON.stringify(updatedPosts));\r\n            return updatedPosts;\r\n        });\r\n    };\r\n\r\n    const removePost = (post) => {\r\n        setPosts(prevPosts => {\r\n            const updatedPosts = prevPosts.filter(item => item.id !== post.id);\r\n            localStorage.setItem(\"posts\", JSON.stringify(updatedPosts));\r\n            return updatedPosts;\r\n        });\r\n    };\r\n\r\n    const clearPost = () => {\r\n        setPosts([]);\r\n    };\r\n\r\n    const updatePost = (updatedPost) => {\r\n        removePost(updatedPost);\r\n        addPost(updatedPost);\r\n    };\r\n\r\n    const filterPostsByCategory = (category) => {\r\n        return posts.filter(post => post.category === category);\r\n    };\r\n\r\n    const getAmountOfFilterPostsByCategory = (category) => {\r\n        return posts.filter(post => post.category === category).length;\r\n    };\r\n\r\n    const setNewPostId = () => parseInt(posts.length + 1, 10);\r\n\r\n    const getLastThreePostsByCategory = category => {\r\n        const sortedPosts = posts\r\n            .filter(post => post.category === category)\r\n            .sort((a, b) => new Date(b.date) - new Date(a.date));\r\n\r\n        return sortedPosts.slice(0, 3);\r\n    };\r\n\r\n    const getPostById = currentPostId => {\r\n        return posts.find(post => post.id === currentPostId);\r\n    }\r\n\r\n    const getPostByTitle = title => {\r\n        return posts.filter(post => post.title.includes(title));\r\n    }\r\n\r\n    const value = {\r\n        posts,\r\n        fetchPosts,\r\n        addPost,\r\n        removePost,\r\n        clearPost,\r\n        filterPostsByCategory,\r\n        getLastThreePostsByCategory,\r\n        getAmountOfFilterPostsByCategory,\r\n        setNewPostId,\r\n        getPostById,\r\n        getPostByTitle,\r\n        updatePost\r\n    };\r\n\r\n    return (\r\n        <PostsContext.Provider value={value}>\r\n            {children}\r\n        </PostsContext.Provider>\r\n    );\r\n}\r\n\r\nexport default PostsProvider;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}