{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tal\\\\Documents\\\\Programming courses\\\\WebDev\\\\BackEnd\\\\Blog_Final_Project\\\\BlogFrontEnd\\\\BlogFrontEnd\\\\src\\\\providers\\\\posts-providers.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useEffect, useState } from \"react\";\n\n// Context creation for Posts\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const PostsContext = /*#__PURE__*/createContext(null);\nexport function PostsProvider({\n  children\n}) {\n  _s();\n  let [posts, setPosts] = useState([]);\n\n  // Gets random details to the posts in addition to when given in the fetch\n  function getRandomCategoryForPost() {\n    const categories = ['Daily_Digest', 'Design_Tools', 'Tutorials'];\n    const randomIndex = Math.floor(Math.random() * categories.length);\n    return categories[randomIndex];\n  }\n  function getRandomDate() {\n    const startDate = new Date('2023-01-01');\n    const currentDate = new Date();\n    const randomMilliseconds = Math.floor(Math.random() * (currentDate - startDate + 1));\n    const randomDate = new Date(startDate.getTime() + randomMilliseconds);\n    return randomDate;\n  }\n  const fetchPosts = () => {\n    // Using local storage for the posts from the fetch\n    const storedPosts = JSON.parse(localStorage.getItem(\"posts\")) || [];\n\n    // If the local storage is empty, then do fetch to the details for the posts\n    if (storedPosts.length > 0) {\n      setPosts(storedPosts);\n    } else {\n      fetch('https://jsonplaceholder.typicode.com/posts').then(response => {\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        return response.json();\n      }).then(json => {\n        const postsWithCategories = json.map(post => {\n          const randomDate = getRandomDate();\n          const formatter = new Intl.DateTimeFormat('en', {\n            month: 'long',\n            day: 'numeric',\n            year: 'numeric'\n          });\n          const formattedDate = formatter.format(randomDate);\n          return {\n            id: post.id,\n            title: post.title,\n            description: post.body,\n            date: formattedDate,\n            category: getRandomCategoryForPost(),\n            imageUrl: `https://picsum.photos/id/${post.id}/250/300`\n          };\n        });\n        setPosts(postsWithCategories);\n\n        // Save fetched posts to local storage\n        localStorage.setItem(\"posts\", JSON.stringify(postsWithCategories));\n      }).catch(error => {\n        console.error('Error fetching posts:', error);\n      });\n    }\n  };\n  useEffect(() => {\n    fetchPosts();\n  }, []);\n  useEffect(() => {\n    // Save posts to local storage whenever posts are updated\n    localStorage.setItem(\"posts\", JSON.stringify(posts));\n  }, [posts]);\n  const addPost = post => {\n    setPosts(prevPosts => {\n      const updatedPosts = [...prevPosts, post];\n      localStorage.setItem(\"posts\", JSON.stringify(updatedPosts));\n      return updatedPosts;\n    });\n  };\n  const removePost = post => {\n    setPosts(prevPosts => {\n      const updatedPosts = prevPosts.filter(item => item.id !== post.id);\n      localStorage.setItem(\"posts\", JSON.stringify(updatedPosts));\n      return updatedPosts;\n    });\n  };\n  const clearPost = () => {\n    setPosts([]);\n  };\n  const updatePost = updatedPost => {\n    removePost(updatedPost);\n    addPost(updatedPost);\n  };\n  const filterPostsByCategory = category => {\n    return posts.filter(post => post.category === category);\n  };\n  const getAmountOfFilterPostsByCategory = category => {\n    return posts.filter(post => post.category === category).length;\n  };\n  const setNewPostId = () => parseInt(posts.length + 1, 10);\n  const getLastThreePostsByCategory = category => {\n    const sortedPosts = posts.filter(post => post.category === category).sort((a, b) => new Date(b.date) - new Date(a.date));\n    return sortedPosts.slice(0, 3);\n  };\n  const getPostById = currentPostId => {\n    return posts.find(post => post.id === currentPostId);\n  };\n  const getPostByTitle = title => {\n    return posts.filter(post => post.title.includes(title));\n  };\n  const value = {\n    posts,\n    fetchPosts,\n    addPost,\n    removePost,\n    clearPost,\n    filterPostsByCategory,\n    getLastThreePostsByCategory,\n    getAmountOfFilterPostsByCategory,\n    setNewPostId,\n    getPostById,\n    getPostByTitle,\n    updatePost\n  };\n  return /*#__PURE__*/_jsxDEV(PostsContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 9\n  }, this);\n}\n_s(PostsProvider, \"PHc/x8VzfKAeoEucl9QADHSFyUk=\");\n_c = PostsProvider;\nexport default PostsProvider;\nvar _c;\n$RefreshReg$(_c, \"PostsProvider\");","map":{"version":3,"names":["React","createContext","useEffect","useState","jsxDEV","_jsxDEV","PostsContext","PostsProvider","children","_s","posts","setPosts","getRandomCategoryForPost","categories","randomIndex","Math","floor","random","length","getRandomDate","startDate","Date","currentDate","randomMilliseconds","randomDate","getTime","fetchPosts","storedPosts","JSON","parse","localStorage","getItem","fetch","then","response","ok","Error","json","postsWithCategories","map","post","formatter","Intl","DateTimeFormat","month","day","year","formattedDate","format","id","title","description","body","date","category","imageUrl","setItem","stringify","catch","error","console","addPost","prevPosts","updatedPosts","removePost","filter","item","clearPost","updatePost","updatedPost","filterPostsByCategory","getAmountOfFilterPostsByCategory","setNewPostId","parseInt","getLastThreePostsByCategory","sortedPosts","sort","a","b","slice","getPostById","currentPostId","find","getPostByTitle","includes","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Tal/Documents/Programming courses/WebDev/BackEnd/Blog_Final_Project/BlogFrontEnd/BlogFrontEnd/src/providers/posts-providers.js"],"sourcesContent":["import React, { createContext, useEffect, useState } from \"react\";\r\n\r\n// Context creation for Posts\r\nexport const PostsContext = createContext(null);\r\n\r\nexport function PostsProvider({ children }) {\r\n    let [posts, setPosts] = useState([]);\r\n\r\n    // Gets random details to the posts in addition to when given in the fetch\r\n    function getRandomCategoryForPost() {\r\n        const categories = ['Daily_Digest', 'Design_Tools', 'Tutorials'];\r\n        const randomIndex = Math.floor(Math.random() * categories.length);\r\n        return categories[randomIndex];\r\n    }\r\n\r\n    function getRandomDate() {\r\n        const startDate = new Date('2023-01-01');\r\n        const currentDate = new Date();\r\n        const randomMilliseconds = Math.floor(Math.random() * (currentDate - startDate + 1));\r\n        const randomDate = new Date(startDate.getTime() + randomMilliseconds);\r\n        return randomDate;\r\n    }\r\n\r\n    const fetchPosts = () => {\r\n        // Using local storage for the posts from the fetch\r\n        const storedPosts = JSON.parse(localStorage.getItem(\"posts\")) || [];\r\n\r\n        // If the local storage is empty, then do fetch to the details for the posts\r\n        if (storedPosts.length > 0) {\r\n            setPosts(storedPosts);\r\n        } else {\r\n            fetch('https://jsonplaceholder.typicode.com/posts')\r\n                .then(response => {\r\n                    if (!response.ok) {\r\n                        throw new Error('Network response was not ok');\r\n                    }\r\n                    return response.json();\r\n                })\r\n                .then(json => {\r\n                    const postsWithCategories = json.map(post => {\r\n                        const randomDate = getRandomDate();\r\n                        const formatter = new Intl.DateTimeFormat('en', {\r\n                            month: 'long',\r\n                            day: 'numeric',\r\n                            year: 'numeric',\r\n                        });\r\n                        const formattedDate = formatter.format(randomDate);\r\n\r\n                        return {\r\n                            id: post.id,\r\n                            title: post.title,\r\n                            description: post.body,\r\n                            date: formattedDate,\r\n                            category: getRandomCategoryForPost(),\r\n                            imageUrl: `https://picsum.photos/id/${post.id}/250/300`,\r\n                        };\r\n                    });\r\n\r\n                    setPosts(postsWithCategories);\r\n\r\n                    // Save fetched posts to local storage\r\n                    localStorage.setItem(\"posts\", JSON.stringify(postsWithCategories));\r\n                })\r\n                .catch(error => {\r\n                    console.error('Error fetching posts:', error);\r\n                });\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchPosts();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        // Save posts to local storage whenever posts are updated\r\n        localStorage.setItem(\"posts\", JSON.stringify(posts));\r\n    }, [posts]);\r\n\r\n    const addPost = (post) => {\r\n        setPosts(prevPosts => {\r\n            const updatedPosts = [...prevPosts, post];\r\n            localStorage.setItem(\"posts\", JSON.stringify(updatedPosts));\r\n            return updatedPosts;\r\n        });\r\n    };\r\n\r\n    const removePost = (post) => {\r\n        setPosts(prevPosts => {\r\n            const updatedPosts = prevPosts.filter(item => item.id !== post.id);\r\n            localStorage.setItem(\"posts\", JSON.stringify(updatedPosts));\r\n            return updatedPosts;\r\n        });\r\n    };\r\n\r\n    const clearPost = () => {\r\n        setPosts([]);\r\n    };\r\n\r\n    const updatePost = (updatedPost) => {\r\n        removePost(updatedPost);\r\n        addPost(updatedPost);\r\n    };\r\n\r\n    const filterPostsByCategory = (category) => {\r\n        return posts.filter(post => post.category === category);\r\n    };\r\n\r\n    const getAmountOfFilterPostsByCategory = (category) => {\r\n        return posts.filter(post => post.category === category).length;\r\n    };\r\n\r\n    const setNewPostId = () => parseInt(posts.length + 1, 10);\r\n\r\n    const getLastThreePostsByCategory = category => {\r\n        const sortedPosts = posts\r\n            .filter(post => post.category === category)\r\n            .sort((a, b) => new Date(b.date) - new Date(a.date));\r\n\r\n        return sortedPosts.slice(0, 3);\r\n    };\r\n\r\n    const getPostById = currentPostId => {\r\n        return posts.find(post => post.id === currentPostId);\r\n    }\r\n\r\n    const getPostByTitle = title => {\r\n        return posts.filter(post => post.title.includes(title));\r\n    }\r\n\r\n    const value = {\r\n        posts,\r\n        fetchPosts,\r\n        addPost,\r\n        removePost,\r\n        clearPost,\r\n        filterPostsByCategory,\r\n        getLastThreePostsByCategory,\r\n        getAmountOfFilterPostsByCategory,\r\n        setNewPostId,\r\n        getPostById,\r\n        getPostByTitle,\r\n        updatePost\r\n    };\r\n\r\n    return (\r\n        <PostsContext.Provider value={value}>\r\n            {children}\r\n        </PostsContext.Provider>\r\n    );\r\n}\r\n\r\nexport default PostsProvider;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}