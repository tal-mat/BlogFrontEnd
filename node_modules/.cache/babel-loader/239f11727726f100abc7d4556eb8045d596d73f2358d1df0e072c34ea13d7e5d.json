{"ast":null,"code":"import React,{useState,useContext,useEffect}from'react';import{useForm}from\"react-hook-form\";import'../styles/AddNewPost.css';// Global State Management Objects\nimport{PostsContext}from\"../providers/posts-providers\";// PostForm function component\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";export function PostForm(_ref){let{}=_ref;const{addPost,clearPost,setNewPostId}=useContext(PostsContext);// import the main functions of {useForm}\nconst{register,handleSubmit,formState,reset}=useForm();// State to manage the formatted date\nconst[formattedDate,setFormattedDate]=useState('');// State to manage msg of post was added successfully date\nconst[successMessage,setSuccessMessage]=useState('');// Update the formattedDate state when the component mounts\nuseEffect(()=>{const currentDate=new Date();const options={month:'short',day:'numeric',year:'numeric'};// format the date as the figma (day, month, year)\nconst formattedDate=new Date(currentDate).toLocaleString('en-US',options);setFormattedDate(formattedDate);},[]);// Handles the form submission\nconst handleNewPostSubmit=data=>{// Extracting values from form elements\nconst{title,description,imageFile,category}=data;// Process the imageFile and get its URL\nconst imageUrl=imageFile.toString();// Creating a formatted date\nconst currentDate=new Date();const options={month:'short',day:'numeric',year:'numeric'};const formattedDate=new Date(currentDate).toLocaleString('en-US',options);setFormattedDate(formattedDate);// Creating an object with the extracted values and the formatted date\nconst postData={id:setNewPostId(),category:category,title:title,description:description,imageUrl:imageUrl,date:formattedDate};// Calling the addPost function with the post data\naddPost(postData);// Set success message and clear the form\nsetSuccessMessage('Post added successfully!');reset();};return/*#__PURE__*/_jsxs(\"div\",{className:\"admin-form\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Add A New Post\"}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit(handleNewPostSubmit),children:[/*#__PURE__*/_jsxs(\"p\",{children:[\"Current Date: \",formattedDate]}),/*#__PURE__*/_jsx(\"label\",{htmlFor:\"category\",children:\"Category:\"}),/*#__PURE__*/_jsxs(\"select\",{id:\"category\",...register('category',{required:true}),defaultValue:\"\"// Set the default value to an empty string\n,children:[/*#__PURE__*/_jsx(\"option\",{value:\"\",disabled:true,children:\"Select a category\"}),/*#__PURE__*/_jsx(\"option\",{value:\"Daily_Digest\",children:\"Daily Digest\"}),/*#__PURE__*/_jsx(\"option\",{value:\"Design_Tools\",children:\"Design Tools\"}),/*#__PURE__*/_jsx(\"option\",{value:\"Tutorials\",children:\"Tutorials\"})]}),formState.errors.category&&/*#__PURE__*/_jsx(\"span\",{className:\"text-danger\",children:\"Please select a category!\"}),/*#__PURE__*/_jsx(\"label\",{htmlFor:\"title\",children:\"Title:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",...register('title'),required:true}),formState.errors.title&&/*#__PURE__*/_jsx(\"span\",{className:\"text-danger\",children:\"Error in this field!\"}),/*#__PURE__*/_jsx(\"label\",{htmlFor:\"description\",children:\"Description:\"}),/*#__PURE__*/_jsx(\"textarea\",{type:\"text\",...register('description'),required:true}),formState.errors.description&&/*#__PURE__*/_jsx(\"span\",{className:\"text-danger\",children:\"Error in this field!\"}),/*#__PURE__*/_jsx(\"label\",{htmlFor:\"imageFile\",children:\"Choose Image:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"file\",accept:\"image/*\",...register('imageFile',{required:true})}),formState.errors.imageFile&&/*#__PURE__*/_jsx(\"span\",{className:\"text-danger\",children:\"Please choose an image!\"}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",children:\"Add Post\"})]}),successMessage&&/*#__PURE__*/_jsx(\"p\",{className:\"success-message\",children:successMessage}),/*#__PURE__*/_jsx(\"button\",{className:\"clearBtn\",onClick:()=>{setSuccessMessage('');reset();clearPost();},children:\"CLEAR\"})]});}","map":{"version":3,"names":["React","useState","useContext","useEffect","useForm","PostsContext","jsx","_jsx","jsxs","_jsxs","PostForm","_ref","addPost","clearPost","setNewPostId","register","handleSubmit","formState","reset","formattedDate","setFormattedDate","successMessage","setSuccessMessage","currentDate","Date","options","month","day","year","toLocaleString","handleNewPostSubmit","data","title","description","imageFile","category","imageUrl","toString","postData","id","date","className","children","onSubmit","htmlFor","required","defaultValue","value","disabled","errors","type","accept","onClick"],"sources":["C:/Users/Tal/Documents/Programming courses/WebDev/BackEnd/Blog_Final_Project/BlogFrontEnd/src/components/AddNewPost.js"],"sourcesContent":["import React, { useState, useContext, useEffect } from 'react';\r\nimport {useForm} from \"react-hook-form\";\r\nimport '../styles/AddNewPost.css';\r\n\r\n\r\n// Global State Management Objects\r\nimport { PostsContext } from \"../providers/posts-providers\";\r\n\r\n// PostForm function component\r\nexport function PostForm({}) {\r\n    const { addPost, clearPost, setNewPostId } = useContext(PostsContext);\r\n\r\n    // import the main functions of {useForm}\r\n    const { register, handleSubmit, formState, reset } = useForm();\r\n\r\n    // State to manage the formatted date\r\n    const [formattedDate, setFormattedDate] = useState('');\r\n\r\n    // State to manage msg of post was added successfully date\r\n    const [successMessage, setSuccessMessage] = useState('');\r\n\r\n    // Update the formattedDate state when the component mounts\r\n    useEffect(() => {\r\n        const currentDate = new Date();\r\n        const options = { month: 'short', day: 'numeric', year: 'numeric' };\r\n        // format the date as the figma (day, month, year)\r\n        const formattedDate = new Date(currentDate).toLocaleString('en-US', options);\r\n        setFormattedDate(formattedDate);\r\n    }, []);\r\n\r\n    // Handles the form submission\r\n    const handleNewPostSubmit = (data) => {\r\n        // Extracting values from form elements\r\n        const { title, description, imageFile, category } = data;\r\n\r\n        // Process the imageFile and get its URL\r\n        const imageUrl = imageFile.toString();\r\n\r\n        // Creating a formatted date\r\n        const currentDate = new Date();\r\n        const options = { month: 'short', day: 'numeric', year: 'numeric' };\r\n        const formattedDate = new Date(currentDate).toLocaleString('en-US', options);\r\n        setFormattedDate(formattedDate);\r\n\r\n        // Creating an object with the extracted values and the formatted date\r\n        const postData = {\r\n            id: setNewPostId(),\r\n            category: category,\r\n            title: title,\r\n            description: description,\r\n            imageUrl: imageUrl,\r\n            date: formattedDate,\r\n        };\r\n\r\n        // Calling the addPost function with the post data\r\n        addPost(postData);\r\n\r\n        // Set success message and clear the form\r\n        setSuccessMessage('Post added successfully!');\r\n        reset();\r\n    };\r\n\r\n    return (\r\n        <div className=\"admin-form\">\r\n            <h2>Add A New Post</h2>\r\n            <form onSubmit={handleSubmit(handleNewPostSubmit)}>\r\n                {/* Displaying the static current date */}\r\n                <p>Current Date: {formattedDate}</p>\r\n\r\n                <label htmlFor=\"category\">Category:</label>\r\n                <select\r\n                    id=\"category\"\r\n                    {...register('category', { required: true })}\r\n                    defaultValue=\"\"  // Set the default value to an empty string\r\n                >\r\n                    <option value=\"\" disabled>Select a category</option>\r\n                    <option value=\"Daily_Digest\">Daily Digest</option>\r\n                    <option value=\"Design_Tools\">Design Tools</option>\r\n                    <option value=\"Tutorials\">Tutorials</option>\r\n                </select>\r\n                {formState.errors.category && (\r\n                    <span className=\"text-danger\">Please select a category!</span>\r\n                )}\r\n\r\n                <label htmlFor=\"title\">Title:</label>\r\n                <input\r\n                    type=\"text\"\r\n                    {...register('title')}\r\n                    required\r\n                />\r\n                {formState.errors.title && <span className=\"text-danger\">Error in this field!</span>}\r\n\r\n\r\n                <label htmlFor=\"description\">Description:</label>\r\n                <textarea\r\n                    type=\"text\"\r\n                    {...register('description')}\r\n                    required\r\n                ></textarea>\r\n                {formState.errors.description && <span className=\"text-danger\">Error in this field!</span>}\r\n\r\n                <label htmlFor=\"imageFile\">Choose Image:</label>\r\n                <input\r\n                    type=\"file\"\r\n                    accept=\"image/*\"\r\n                    {...register('imageFile', { required: true })}\r\n                />\r\n                {formState.errors.imageFile && (\r\n                    <span className=\"text-danger\">Please choose an image!</span>\r\n                )}\r\n\r\n                <button type=\"submit\">Add Post</button>\r\n            </form>\r\n            {successMessage && <p className=\"success-message\">{successMessage}</p>}\r\n\r\n            <button className=\"clearBtn\" onClick={() => { setSuccessMessage(''); reset(); clearPost(); }}>\r\n                CLEAR\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}