{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tal\\\\Documents\\\\Programming courses\\\\WebDev\\\\BackEnd\\\\Blog_Final_Project\\\\BlogFrontEnd\\\\src\\\\providers\\\\posts-providers.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useEffect, useState, useContext } from \"react\";\nimport { AuthContext } from '../providers/auth-provider';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const PostsContext = /*#__PURE__*/createContext(null);\nexport function PostsProvider({\n  children\n}) {\n  _s();\n  const [posts, setPosts] = useState([]);\n  const {\n    user\n  } = useContext(AuthContext);\n  const fetchPosts = async () => {\n    try {\n      const response = await fetch('http://127.0.0.1:4000/posts');\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const posts = await response.json();\n      if (Array.isArray(posts)) {\n        setPosts(posts);\n      } else {\n        console.error('Received data is not an array of posts:', posts);\n      }\n    } catch (error) {\n      console.error('There was a problem with the fetch operation:', error);\n    }\n  };\n  useEffect(() => {\n    fetchPosts();\n  }, []);\n  const addPost = async post => {\n    try {\n      let newPost = {\n        \"category\": post.category,\n        \"title\": post.title,\n        \"description\": post.description,\n        \"imageUrl\": post.imageUrl,\n        \"date\": post.date,\n        \"postedBy\": user.userId\n      };\n      const response = await fetch('http://127.0.0.1:4000/posts', {\n        method: \"POST\",\n        body: JSON.stringify(newPost),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      alert(\"post created\");\n      fetchPosts();\n    } catch (error) {\n      console.error('There was a problem adding the post:', error);\n    }\n  };\n  const removePost = async post => {\n    try {\n      // Optimistic UI update\n      setPosts(prevPosts => prevPosts.filter(item => item.id !== post.id));\n      const response = await fetch(`http://127.0.0.1:4000/posts/${post.id}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n    } catch (error) {\n      console.error('There was a problem removing the post:', error);\n      fetchPosts(); // Refetch posts to synchronize with the server\n    }\n  };\n  const clearPost = async () => {\n    try {\n      setPosts([]);\n    } catch (error) {\n      console.error('There was a problem clearing posts:', error);\n    }\n  };\n  const updatePost = async updatedPost => {\n    try {\n      // Optimistic UI update\n      setPosts(prevPosts => prevPosts.map(post => post.id === updatedPost.id ? {\n        ...post,\n        ...updatedPost\n      } : post));\n\n      // Actual PUT request for updating the post\n      const response = await fetch(`http://127.0.0.1:4000/posts/${updatedPost.id}`, {\n        method: 'PUT',\n        body: JSON.stringify(updatedPost),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n    } catch (error) {\n      // Revert the optimistic UI update on error\n      console.error('There was a problem updating the post:', error);\n      fetchPosts(); // Refetch posts to synchronize with the server\n    }\n  };\n  const filterPostsByCategory = category => {\n    return posts.filter(post => post.category === category);\n  };\n  const getAmountOfFilterPostsByCategory = category => {\n    return posts.filter(post => post.category === category).length;\n  };\n  const setNewPostId = () => parseInt(posts.length + 1, 10);\n  const getLastThreePostsByCategory = category => {\n    const sortedPosts = posts.filter(post => post.category === category).sort((a, b) => new Date(b.date) - new Date(a.date));\n    return sortedPosts.slice(0, 3);\n  };\n  const getPostById = currentPostId => {\n    return posts.find(post => post.id === currentPostId);\n  };\n  const getPostByTitle = title => {\n    return posts.filter(post => post.title.includes(title));\n  };\n  const searchPosts = async (from, to, filterText, lastName) => {\n    try {\n      const url = 'http://127.0.0.1:4000/posts';\n      const requestBody = {\n        ...(from !== undefined && {\n          from\n        }),\n        ...(to !== undefined && {\n          to\n        }),\n        ...(filterText !== null && {\n          filterText\n        }),\n        ...(lastName !== null && {\n          lastName\n        })\n      };\n      const options = {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      };\n      const queryParams = new URLSearchParams(requestBody);\n      const fullUrl = `${url}?${queryParams.toString()}`;\n      console.log('Full Request URL:', fullUrl);\n      const response = await fetch(fullUrl, options);\n      console.log('Response Status:', response.status);\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const foundPosts = await response.json();\n      console.log('Found Posts:', foundPosts);\n      if (Array.isArray(foundPosts)) {\n        return foundPosts;\n      } else {\n        console.error('Received data is not an array of posts:', foundPosts);\n      }\n    } catch (error) {\n      console.error('There was a problem with the fetch operation of searching posts:', error);\n    }\n  };\n  const value = {\n    posts,\n    setPosts,\n    fetchPosts,\n    addPost,\n    removePost,\n    clearPost,\n    filterPostsByCategory,\n    getLastThreePostsByCategory,\n    getAmountOfFilterPostsByCategory,\n    setNewPostId,\n    getPostById,\n    getPostByTitle,\n    updatePost,\n    searchPosts\n  };\n  return /*#__PURE__*/_jsxDEV(PostsContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 212,\n    columnNumber: 5\n  }, this);\n}\n_s(PostsProvider, \"omHF6PJyNAaQxhbtLbXyaS78q/s=\");\n_c = PostsProvider;\nexport default PostsProvider;\nvar _c;\n$RefreshReg$(_c, \"PostsProvider\");","map":{"version":3,"names":["React","createContext","useEffect","useState","useContext","AuthContext","jsxDEV","_jsxDEV","PostsContext","PostsProvider","children","_s","posts","setPosts","user","fetchPosts","response","fetch","ok","Error","json","Array","isArray","console","error","addPost","post","newPost","category","title","description","imageUrl","date","userId","method","body","JSON","stringify","headers","alert","removePost","prevPosts","filter","item","id","clearPost","updatePost","updatedPost","map","filterPostsByCategory","getAmountOfFilterPostsByCategory","length","setNewPostId","parseInt","getLastThreePostsByCategory","sortedPosts","sort","a","b","Date","slice","getPostById","currentPostId","find","getPostByTitle","includes","searchPosts","from","to","filterText","lastName","url","requestBody","undefined","options","queryParams","URLSearchParams","fullUrl","toString","log","status","foundPosts","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Tal/Documents/Programming courses/WebDev/BackEnd/Blog_Final_Project/BlogFrontEnd/src/providers/posts-providers.js"],"sourcesContent":["import React, { createContext, useEffect, useState, useContext  } from \"react\";\r\nimport { AuthContext } from '../providers/auth-provider';\r\n\r\n\r\nexport const PostsContext = createContext(null);\r\n\r\nexport function PostsProvider({ children }) {\r\n  const [posts, setPosts] = useState([]);\r\n  const { user } = useContext(AuthContext);\r\n\r\n\r\n  const fetchPosts = async () => {\r\n    try {\r\n      const response = await fetch('http://127.0.0.1:4000/posts');\r\n      if (!response.ok) {\r\n        throw new Error('Network response was not ok');\r\n      }\r\n      const posts = await response.json();\r\n\r\n      if (Array.isArray(posts)) {\r\n        setPosts(posts);\r\n      } else {\r\n        console.error('Received data is not an array of posts:', posts);\r\n      }\r\n    } catch (error) {\r\n      console.error('There was a problem with the fetch operation:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchPosts();\r\n  }, []);\r\n\r\n\r\n\r\n  const addPost = async (post) => {\r\n    try {\r\n      let newPost = {\r\n        \"category\": post.category,\r\n        \"title\": post.title,\r\n        \"description\": post.description,\r\n        \"imageUrl\": post.imageUrl,\r\n        \"date\": post.date,\r\n        \"postedBy\": user.userId\r\n      };\r\n\r\n      const response = await fetch('http://127.0.0.1:4000/posts', {\r\n        method: \"POST\",\r\n        body: JSON.stringify(newPost),\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Network response was not ok');\r\n      }\r\n\r\n      alert(\"post created\");\r\n      fetchPosts();\r\n\r\n    } catch (error) {\r\n      console.error('There was a problem adding the post:', error);\r\n    }\r\n  };\r\n\r\n\r\n  const removePost = async (post) => {\r\n    try {\r\n      // Optimistic UI update\r\n      setPosts(prevPosts => prevPosts.filter(item => item.id !== post.id));\r\n\r\n      const response = await fetch(`http://127.0.0.1:4000/posts/${post.id}`, {\r\n        method: 'DELETE',\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Network response was not ok');\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error('There was a problem removing the post:', error);\r\n      fetchPosts(); // Refetch posts to synchronize with the server\r\n    }\r\n  };\r\n\r\n  const clearPost = async () => {\r\n    try {\r\n      setPosts([]);\r\n    } catch (error) {\r\n      console.error('There was a problem clearing posts:', error);\r\n    }\r\n  };\r\n\r\n  const updatePost = async  (updatedPost) => {\r\n    try {\r\n\r\n      // Optimistic UI update\r\n      setPosts((prevPosts) =>\r\n          prevPosts.map((post) =>\r\n              post.id === updatedPost.id ? { ...post, ...updatedPost } : post\r\n          )\r\n      );\r\n\r\n      // Actual PUT request for updating the post\r\n      const response = await fetch(`http://127.0.0.1:4000/posts/${updatedPost.id}`, {\r\n        method: 'PUT',\r\n        body: JSON.stringify(updatedPost),\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Network response was not ok');\r\n      }\r\n    } catch (error) {\r\n      // Revert the optimistic UI update on error\r\n      console.error('There was a problem updating the post:', error);\r\n      fetchPosts(); // Refetch posts to synchronize with the server\r\n    }\r\n  };\r\n\r\n  const filterPostsByCategory = (category) => {\r\n    return posts.filter(post => post.category === category);\r\n  };\r\n\r\n  const getAmountOfFilterPostsByCategory = (category) => {\r\n    return posts.filter(post => post.category === category).length;\r\n  };\r\n\r\n  const setNewPostId = () => parseInt(posts.length + 1, 10);\r\n\r\n  const getLastThreePostsByCategory = category => {\r\n    const sortedPosts = posts\r\n      .filter(post => post.category === category)\r\n      .sort((a, b) => new Date(b.date) - new Date(a.date));\r\n\r\n    return sortedPosts.slice(0, 3);\r\n  };\r\n\r\n  const getPostById = currentPostId => {\r\n    return posts.find(post => post.id === currentPostId);\r\n  }\r\n\r\n  const getPostByTitle = title => {\r\n    return posts.filter(post => post.title.includes(title));\r\n  }\r\n\r\n  const searchPosts = async (from, to, filterText, lastName) => {\r\n    try {\r\n      const url = 'http://127.0.0.1:4000/posts';\r\n      const requestBody = {\r\n        ...(from !== undefined && { from }),\r\n        ...(to !== undefined && { to }),\r\n        ...(filterText !== null && { filterText }),\r\n        ...(lastName !== null && { lastName }),\r\n      };\r\n\r\n      const options = {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      };\r\n\r\n\r\n      const queryParams = new URLSearchParams(requestBody);\r\n      const fullUrl = `${url}?${queryParams.toString()}`;\r\n\r\n      console.log('Full Request URL:', fullUrl);\r\n\r\n      const response = await fetch(fullUrl, options);\r\n\r\n      console.log('Response Status:', response.status);\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Network response was not ok');\r\n      }\r\n\r\n      const foundPosts = await response.json();\r\n      console.log('Found Posts:', foundPosts);\r\n\r\n      if (Array.isArray(foundPosts)) {\r\n        return foundPosts;\r\n      } else {\r\n        console.error('Received data is not an array of posts:', foundPosts);\r\n      }\r\n    } catch (error) {\r\n      console.error('There was a problem with the fetch operation of searching posts:', error);\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    posts,\r\n    setPosts,\r\n    fetchPosts,\r\n    addPost,\r\n    removePost,\r\n    clearPost,\r\n    filterPostsByCategory,\r\n    getLastThreePostsByCategory,\r\n    getAmountOfFilterPostsByCategory,\r\n    setNewPostId,\r\n    getPostById,\r\n    getPostByTitle,\r\n    updatePost,\r\n    searchPosts\r\n  };\r\n\r\n  return (\r\n    <PostsContext.Provider value={value}>\r\n      {children}\r\n    </PostsContext.Provider>\r\n  );\r\n}\r\n\r\nexport default PostsProvider;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}