{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tal\\\\Documents\\\\Programming courses\\\\WebDev\\\\BackEnd\\\\Blog_Final_Project\\\\BlogFrontEnd\\\\src\\\\providers\\\\auth-provider.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState } from \"react\";\nimport { UserNotFoundError, IncorrectPasswordError, DuplicateUsernameError, DuplicateEmailError } from '../errors/CustomErrors';\nimport hashPassword from '../functions/HashedPassword';\n\n// Context creation for User\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext(null);\nexport function AuthProvider({\n  children\n}) {\n  _s();\n  const [user, setUser] = useState(null);\n  const LoginIn = async (username, password) => {\n    // console.log('Request Payload:', JSON.stringify({username, password}));\n    const response = await fetch('http://127.0.0.1:4000/users/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username,\n        password\n      }),\n      credentials: \"include\"\n    });\n    console.log(\"login response: \", response);\n    if (response.ok) {\n      const {\n        token,\n        userFirstName\n      } = await response.json();\n      // console.log({token, userFirstName});\n      // console.log(\"user first name:\", userFirstName);\n\n      // Initialize user object with firstName and empty fields\n      setUser({\n        userId: '',\n        firstName: userFirstName,\n        lastName: '',\n        userName: '',\n        email: '',\n        birthDate: '',\n        gender: '',\n        address: '',\n        phoneNumber: '',\n        registrationDate: '',\n        accountStatus: '',\n        role: ''\n      });\n\n      // setCookie('token', token, { path: '/' });\n\n      return {\n        status: 'success',\n        message: 'Login successful'\n      };\n    } else {\n      // console.log('Server Response:', response);\n\n      const errorData = await response.json();\n      let errorType = 'UnknownError'; // Default error type\n\n      if (errorData.errorType) {\n        errorType = errorData.errorType;\n      }\n      if (errorType === 'UserNotFoundError') {\n        throw new UserNotFoundError(username);\n      } else if (errorType === 'IncorrectPasswordError') {\n        throw new IncorrectPasswordError();\n      } else if (errorType === 'UnknownError') {\n        throw new Error('An unexpected error occurred on the server. Please try again later.');\n      }\n    }\n  };\n  const signOut = async () => {\n    try {\n      const response = await fetch('http://127.0.0.1:4000/users/signout', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: \"include\"\n      });\n      if (response.ok) {\n        setUser(null);\n        // console.log(\"User signed out successfully.\");\n      } else {\n        console.error(\"Failed to sign out:\", response.statusText);\n      }\n    } catch (error) {\n      console.error(\"Error occurred during sign out:\", error);\n    } finally {\n      setUser(null);\n    }\n  };\n  const signIn = async user => {\n    let date = {\n      current: new Date()\n    };\n    let newUser = {\n      \"firstName\": user.firstName,\n      \"lastName\": user.lastName,\n      \"username\": user.username,\n      \"password\": user.password,\n      \"email\": user.email,\n      \"birthDate\": user.birthDate,\n      \"gender\": user.gender,\n      \"address\": user.address,\n      \"phoneNumber\": user.phoneNumber,\n      \"registrationDate\": date.current,\n      \"accountStatus\": true,\n      \"role\": \"user\"\n    };\n    const response = await fetch('http://127.0.0.1:4000/users', {\n      method: \"POST\",\n      body: JSON.stringify(newUser),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n\n    // console.log(\"Response Server:\", response);\n\n    if (response.ok) {\n      // User created successfully\n      await LoginIn(newUser.username, newUser.password);\n      return {\n        status: 'success',\n        message: 'User created and logged in successfully.'\n      };\n    } else {\n      const errorData = await response.json();\n      let errorType = 'UnknownError'; // Default error type\n\n      if (errorData.errorType) {\n        errorType = errorData.errorType;\n      }\n      if (errorType === 'DuplicateUsernameError') {\n        throw new DuplicateUsernameError();\n      } else if (errorType === 'DuplicateEmailError') {\n        throw new DuplicateEmailError();\n      } else {\n        throw new Error('Unexpected error during user creation. Please try again later.');\n      }\n    }\n  };\n  const value = {\n    user,\n    LoginIn,\n    signOut,\n    signIn\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 9\n  }, this);\n}\n_s(AuthProvider, \"Iei9RGtZU29Y1RhBe1sbfh/MntA=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","UserNotFoundError","IncorrectPasswordError","DuplicateUsernameError","DuplicateEmailError","hashPassword","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","LoginIn","username","password","response","fetch","method","headers","body","JSON","stringify","credentials","console","log","ok","token","userFirstName","json","userId","firstName","lastName","userName","email","birthDate","gender","address","phoneNumber","registrationDate","accountStatus","role","status","message","errorData","errorType","Error","signOut","error","statusText","signIn","date","current","Date","newUser","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Tal/Documents/Programming courses/WebDev/BackEnd/Blog_Final_Project/BlogFrontEnd/src/providers/auth-provider.js"],"sourcesContent":["import React, { createContext, useState } from \"react\";\r\nimport {\r\n    UserNotFoundError,\r\n    IncorrectPasswordError,\r\n    DuplicateUsernameError,\r\n    DuplicateEmailError\r\n} from '../errors/CustomErrors';\r\nimport hashPassword from '../functions/HashedPassword';\r\n\r\n// Context creation for User\r\nexport const AuthContext = createContext(null);\r\n\r\nexport function AuthProvider({ children }) {\r\n    const [user, setUser] = useState(null);\r\n\r\n    const LoginIn = async (username, password) => {\r\n        // console.log('Request Payload:', JSON.stringify({username, password}));\r\n        const response = await fetch('http://127.0.0.1:4000/users/login', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                username,\r\n                password,\r\n            }),\r\n            credentials: \"include\",\r\n        });\r\n        console.log(\"login response: \", response);\r\n\r\n        if (response.ok) {\r\n\r\n            const {token, userFirstName} = await response.json();\r\n            // console.log({token, userFirstName});\r\n            // console.log(\"user first name:\", userFirstName);\r\n\r\n            // Initialize user object with firstName and empty fields\r\n            setUser({\r\n                userId: '',\r\n                firstName: userFirstName,\r\n                lastName: '',\r\n                userName: '',\r\n                email: '',\r\n                birthDate: '',\r\n                gender: '',\r\n                address: '',\r\n                phoneNumber: '',\r\n                registrationDate: '',\r\n                accountStatus: '',\r\n                role: '',\r\n            });\r\n\r\n            // setCookie('token', token, { path: '/' });\r\n\r\n            return {status: 'success', message: 'Login successful'};\r\n        } else {\r\n            // console.log('Server Response:', response);\r\n\r\n            const errorData = await response.json();\r\n\r\n            let errorType = 'UnknownError'; // Default error type\r\n\r\n            if (errorData.errorType) {\r\n                errorType = errorData.errorType;\r\n            }\r\n\r\n            if (errorType === 'UserNotFoundError') {\r\n                throw new UserNotFoundError(username);\r\n            } else if (errorType === 'IncorrectPasswordError') {\r\n                throw new IncorrectPasswordError();\r\n            } else if (errorType === 'UnknownError') {\r\n                throw new Error('An unexpected error occurred on the server. Please try again later.');\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    const signOut = async () => {\r\n        try {\r\n            const response = await fetch('http://127.0.0.1:4000/users/signout', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                credentials: \"include\",\r\n            });\r\n\r\n            if (response.ok) {\r\n                setUser(null);\r\n                // console.log(\"User signed out successfully.\");\r\n            } else {\r\n                console.error(\"Failed to sign out:\", response.statusText);\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error occurred during sign out:\", error);\r\n        } finally {\r\n            setUser(null);\r\n        }\r\n    };\r\n\r\n    const signIn = async (user) => {\r\n        let date = { current: new Date() };\r\n\r\n        let newUser = {\r\n            \"firstName\": user.firstName,\r\n            \"lastName\": user.lastName,\r\n            \"username\": user.username,\r\n            \"password\": user.password,\r\n            \"email\": user.email,\r\n            \"birthDate\": user.birthDate,\r\n            \"gender\": user.gender,\r\n            \"address\": user.address,\r\n            \"phoneNumber\": user.phoneNumber,\r\n            \"registrationDate\": date.current,\r\n            \"accountStatus\": true,\r\n            \"role\": \"user\",\r\n        };\r\n\r\n        const response = await fetch('http://127.0.0.1:4000/users', {\r\n            method: \"POST\",\r\n            body: JSON.stringify(newUser),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n        });\r\n\r\n        // console.log(\"Response Server:\", response);\r\n\r\n        if (response.ok) {\r\n            // User created successfully\r\n            await LoginIn(newUser.username, newUser.password);\r\n            return { status: 'success', message: 'User created and logged in successfully.' };\r\n        } else {\r\n            const errorData = await response.json();\r\n\r\n            let errorType = 'UnknownError'; // Default error type\r\n\r\n            if (errorData.errorType) {\r\n                errorType = errorData.errorType;\r\n            }\r\n\r\n            if (errorType === 'DuplicateUsernameError') {\r\n                throw new DuplicateUsernameError();\r\n            } else if (errorType === 'DuplicateEmailError') {\r\n                throw new DuplicateEmailError();\r\n            } else {\r\n                throw new Error('Unexpected error during user creation. Please try again later.');\r\n            }\r\n        }\r\n    };\r\n\r\n    const value = {\r\n        user,\r\n        LoginIn,\r\n        signOut,\r\n        signIn,\r\n    };\r\n\r\n    return (\r\n        <AuthContext.Provider value={value}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}