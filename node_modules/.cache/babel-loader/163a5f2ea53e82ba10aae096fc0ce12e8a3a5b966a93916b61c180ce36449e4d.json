{"ast":null,"code":"import React,{createContext,useEffect,useState,useContext}from\"react\";import{AuthContext}from'../providers/auth-provider';import{jsx as _jsx}from\"react/jsx-runtime\";export const PostsContext=/*#__PURE__*/createContext(null);export function PostsProvider(_ref){let{children}=_ref;const[posts,setPosts]=useState([]);const{user}=useContext(AuthContext);const fetchPosts=async()=>{try{const response=await fetch('http://127.0.0.1:4000/posts');if(!response.ok){throw new Error('Network response was not ok');}const posts=await response.json();if(Array.isArray(posts)){setPosts(posts);}else{console.error('Received data is not an array of posts:',posts);}}catch(error){console.error('There was a problem with the fetch operation:',error);}};useEffect(()=>{fetchPosts();},[]);const addPost=async post=>{try{let newPost={\"category\":post.category,\"title\":post.title,\"description\":post.description,\"imageUrl\":post.imageUrl,\"date\":post.date,\"postedBy\":user.userId};const response=await fetch('http://127.0.0.1:4000/posts',{method:\"POST\",body:JSON.stringify(newPost),headers:{'Content-Type':'application/json'}});if(!response.ok){throw new Error('Network response was not ok');}alert(\"post created\");fetchPosts();}catch(error){console.error('There was a problem adding the post:',error);}};const removePost=async post=>{try{// Optimistic UI update\nsetPosts(prevPosts=>prevPosts.filter(item=>item.id!==post.id));const response=await fetch(\"http://127.0.0.1:4000/posts/\".concat(post.id),{method:'DELETE'});if(!response.ok){throw new Error('Network response was not ok');}}catch(error){console.error('There was a problem removing the post:',error);fetchPosts();// Refetch posts to synchronize with the server\n}};const clearPost=async()=>{try{setPosts([]);}catch(error){console.error('There was a problem clearing posts:',error);}};const updatePost=async updatedPost=>{try{// Optimistic UI update\nsetPosts(prevPosts=>prevPosts.map(post=>post.id===updatedPost.id?{...post,...updatedPost}:post));// Actual PUT request for updating the post\nconst response=await fetch(\"http://127.0.0.1:4000/posts/\".concat(updatedPost.id),{method:'PUT',body:JSON.stringify(updatedPost),headers:{'Content-Type':'application/json'}});if(!response.ok){throw new Error('Network response was not ok');}}catch(error){// Revert the optimistic UI update on error\nconsole.error('There was a problem updating the post:',error);fetchPosts();// Refetch posts to synchronize with the server\n}};const filterPostsByCategory=category=>{return posts.filter(post=>post.category===category);};const getAmountOfFilterPostsByCategory=category=>{return posts.filter(post=>post.category===category).length;};const setNewPostId=()=>parseInt(posts.length+1,10);const getLastThreePostsByCategory=category=>{const sortedPosts=posts.filter(post=>post.category===category).sort((a,b)=>new Date(b.date)-new Date(a.date));return sortedPosts.slice(0,3);};const getPostById=currentPostId=>{return posts.find(post=>post.id===currentPostId);};const getPostByTitle=title=>{return posts.filter(post=>post.title.includes(title));};const searchPosts=async(from,to,filterText,lastName)=>{try{const url='http://127.0.0.1:4000/posts';const requestBody={...(from!==undefined&&{from}),...(to!==undefined&&{to}),...(filterText!==null&&{filterText}),...(lastName!==null&&{lastName})};const options={method:'GET',headers:{'Content-Type':'application/json'}};const queryParams=new URLSearchParams(requestBody);const fullUrl=\"\".concat(url,\"?\").concat(queryParams.toString());console.log('Full Request URL:',fullUrl);const response=await fetch(fullUrl,options);console.log('Response Status:',response.status);if(!response.ok){throw new Error('Network response was not ok');}const foundPosts=await response.json();console.log('Found Posts:',foundPosts);if(Array.isArray(foundPosts)){return foundPosts;}else{console.error('Received data is not an array of posts:',foundPosts);}}catch(error){console.error('There was a problem with the fetch operation of searching posts:',error);}};const value={posts,setPosts,fetchPosts,addPost,removePost,clearPost,filterPostsByCategory,getLastThreePostsByCategory,getAmountOfFilterPostsByCategory,setNewPostId,getPostById,getPostByTitle,updatePost,searchPosts};return/*#__PURE__*/_jsx(PostsContext.Provider,{value:value,children:children});}export default PostsProvider;","map":{"version":3,"names":["React","createContext","useEffect","useState","useContext","AuthContext","jsx","_jsx","PostsContext","PostsProvider","_ref","children","posts","setPosts","user","fetchPosts","response","fetch","ok","Error","json","Array","isArray","console","error","addPost","post","newPost","category","title","description","imageUrl","date","userId","method","body","JSON","stringify","headers","alert","removePost","prevPosts","filter","item","id","concat","clearPost","updatePost","updatedPost","map","filterPostsByCategory","getAmountOfFilterPostsByCategory","length","setNewPostId","parseInt","getLastThreePostsByCategory","sortedPosts","sort","a","b","Date","slice","getPostById","currentPostId","find","getPostByTitle","includes","searchPosts","from","to","filterText","lastName","url","requestBody","undefined","options","queryParams","URLSearchParams","fullUrl","toString","log","status","foundPosts","value","Provider"],"sources":["C:/Users/Tal/Documents/Programming courses/WebDev/BackEnd/Blog_Final_Project/BlogFrontEnd/src/providers/posts-providers.js"],"sourcesContent":["import React, { createContext, useEffect, useState, useContext  } from \"react\";\r\nimport { AuthContext } from '../providers/auth-provider';\r\n\r\n\r\nexport const PostsContext = createContext(null);\r\n\r\nexport function PostsProvider({ children }) {\r\n  const [posts, setPosts] = useState([]);\r\n  const { user } = useContext(AuthContext);\r\n\r\n\r\n  const fetchPosts = async () => {\r\n    try {\r\n      const response = await fetch('http://127.0.0.1:4000/posts');\r\n      if (!response.ok) {\r\n        throw new Error('Network response was not ok');\r\n      }\r\n      const posts = await response.json();\r\n\r\n      if (Array.isArray(posts)) {\r\n        setPosts(posts);\r\n      } else {\r\n        console.error('Received data is not an array of posts:', posts);\r\n      }\r\n    } catch (error) {\r\n      console.error('There was a problem with the fetch operation:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchPosts();\r\n  }, []);\r\n\r\n\r\n\r\n  const addPost = async (post) => {\r\n    try {\r\n      let newPost = {\r\n        \"category\": post.category,\r\n        \"title\": post.title,\r\n        \"description\": post.description,\r\n        \"imageUrl\": post.imageUrl,\r\n        \"date\": post.date,\r\n        \"postedBy\": user.userId\r\n      };\r\n\r\n      const response = await fetch('http://127.0.0.1:4000/posts', {\r\n        method: \"POST\",\r\n        body: JSON.stringify(newPost),\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Network response was not ok');\r\n      }\r\n\r\n      alert(\"post created\");\r\n      fetchPosts();\r\n\r\n    } catch (error) {\r\n      console.error('There was a problem adding the post:', error);\r\n    }\r\n  };\r\n\r\n\r\n  const removePost = async (post) => {\r\n    try {\r\n      // Optimistic UI update\r\n      setPosts(prevPosts => prevPosts.filter(item => item.id !== post.id));\r\n\r\n      const response = await fetch(`http://127.0.0.1:4000/posts/${post.id}`, {\r\n        method: 'DELETE',\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Network response was not ok');\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error('There was a problem removing the post:', error);\r\n      fetchPosts(); // Refetch posts to synchronize with the server\r\n    }\r\n  };\r\n\r\n  const clearPost = async () => {\r\n    try {\r\n      setPosts([]);\r\n    } catch (error) {\r\n      console.error('There was a problem clearing posts:', error);\r\n    }\r\n  };\r\n\r\n  const updatePost = async  (updatedPost) => {\r\n    try {\r\n\r\n      // Optimistic UI update\r\n      setPosts((prevPosts) =>\r\n          prevPosts.map((post) =>\r\n              post.id === updatedPost.id ? { ...post, ...updatedPost } : post\r\n          )\r\n      );\r\n\r\n      // Actual PUT request for updating the post\r\n      const response = await fetch(`http://127.0.0.1:4000/posts/${updatedPost.id}`, {\r\n        method: 'PUT',\r\n        body: JSON.stringify(updatedPost),\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Network response was not ok');\r\n      }\r\n    } catch (error) {\r\n      // Revert the optimistic UI update on error\r\n      console.error('There was a problem updating the post:', error);\r\n      fetchPosts(); // Refetch posts to synchronize with the server\r\n    }\r\n  };\r\n\r\n  const filterPostsByCategory = (category) => {\r\n    return posts.filter(post => post.category === category);\r\n  };\r\n\r\n  const getAmountOfFilterPostsByCategory = (category) => {\r\n    return posts.filter(post => post.category === category).length;\r\n  };\r\n\r\n  const setNewPostId = () => parseInt(posts.length + 1, 10);\r\n\r\n  const getLastThreePostsByCategory = category => {\r\n    const sortedPosts = posts\r\n      .filter(post => post.category === category)\r\n      .sort((a, b) => new Date(b.date) - new Date(a.date));\r\n\r\n    return sortedPosts.slice(0, 3);\r\n  };\r\n\r\n  const getPostById = currentPostId => {\r\n    return posts.find(post => post.id === currentPostId);\r\n  }\r\n\r\n  const getPostByTitle = title => {\r\n    return posts.filter(post => post.title.includes(title));\r\n  }\r\n\r\n  const searchPosts = async (from, to, filterText, lastName) => {\r\n    try {\r\n      const url = 'http://127.0.0.1:4000/posts';\r\n      const requestBody = {\r\n        ...(from !== undefined && { from }),\r\n        ...(to !== undefined && { to }),\r\n        ...(filterText !== null && { filterText }),\r\n        ...(lastName !== null && { lastName }),\r\n      };\r\n\r\n      const options = {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      };\r\n\r\n\r\n      const queryParams = new URLSearchParams(requestBody);\r\n      const fullUrl = `${url}?${queryParams.toString()}`;\r\n\r\n      console.log('Full Request URL:', fullUrl);\r\n\r\n      const response = await fetch(fullUrl, options);\r\n\r\n      console.log('Response Status:', response.status);\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Network response was not ok');\r\n      }\r\n\r\n      const foundPosts = await response.json();\r\n      console.log('Found Posts:', foundPosts);\r\n\r\n      if (Array.isArray(foundPosts)) {\r\n        return foundPosts;\r\n      } else {\r\n        console.error('Received data is not an array of posts:', foundPosts);\r\n      }\r\n    } catch (error) {\r\n      console.error('There was a problem with the fetch operation of searching posts:', error);\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    posts,\r\n    setPosts,\r\n    fetchPosts,\r\n    addPost,\r\n    removePost,\r\n    clearPost,\r\n    filterPostsByCategory,\r\n    getLastThreePostsByCategory,\r\n    getAmountOfFilterPostsByCategory,\r\n    setNewPostId,\r\n    getPostById,\r\n    getPostByTitle,\r\n    updatePost,\r\n    searchPosts\r\n  };\r\n\r\n  return (\r\n    <PostsContext.Provider value={value}>\r\n      {children}\r\n    </PostsContext.Provider>\r\n  );\r\n}\r\n\r\nexport default PostsProvider;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}